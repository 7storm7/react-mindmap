{"version":3,"sources":["images/default.jpg","images/theme1.jpg","images/theme2.jpg","images/theme3.jpg","images/theme4.jpg","component/toolbar/toolbar-item-open.js","component/toolbar/toolbar-item-layout.js","component/toolbar/toolbar-item-theme.js","utils/index.js","component/toolbar/toolbar-item-export.js","component/toolbar/toolbar.js","component/mindmap.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ToolbarItemOpen","props","className","iconClassName","onClick","e","controller","diagram","getDiagramProps","input","document","createElement","type","accept","addEventListener","evt","file","target","files","fr","FileReader","onload","txt","result","obj","JSON","parse","model","run","change","readAsText","click","ToolbarItemLayout","layoutDirs","DiagramLayoutType","LEFT_AND_RIGHT","LEFT_TO_RIGHT","RIGHT_TO_LEFT","onClickSetLayout","layoutDir","diagramProps","cx","enforceFocus","map","dir","key","icon","Icon","text","ToolbarItemTheme","onClickSetTheme","themeKey","themes","defaultThemeImg","theme1Img","theme2Img","theme3Img","theme4Img","theme","src","alt","downloadFile","url","filename","link","href","download","generateSimpleModel","rootKey","replace","c","r","Math","random","toString","Model","create","rootTopicKey","topics","blocks","data","ToolbarItemExport","json","jsonStr","stringify","encodeURIComponent","title","topicKey","Toolbar","this","onClickUndo","onClickRedo","canUndo","canRedo","React","PureComponent","plugins","debug","RichTextEditorPlugin","JsonSerializerPlugin","ThemeSelectorPlugin","Mindmap","diagramRef","ref","setState","onChange","initModel","state","toolbarProps","renderToolbar","renderDiagram","Component","App","Boolean","window","location","hostname","match","localStorage","join","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a1f6a9a7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default.4f8c4983.jpg\";","module.exports = __webpack_public_path__ + \"static/media/theme1.2f59f00b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/theme2.b18193fb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/theme3.61c97910.jpg\";","module.exports = __webpack_public_path__ + \"static/media/theme4.1e21408c.jpg\";","import React from \"react\";\nimport { iconClassName } from \"@blink-mind/renderer-react\";\n\nexport function ToolbarItemOpen(props) {\n  const onClickOpenFile = e => {\n    const { diagram } = props;\n    const diagramProps = diagram.getDiagramProps();\n    const { controller } = diagramProps;\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.accept = \".json,.bm,.blinkmind\";\n    input.addEventListener(\"change\", evt => {\n      const file = evt.target.files[0];\n      const fr = new FileReader();\n      fr.onload = evt => {\n        const txt = evt.target.result;\n        let obj = JSON.parse(txt);\n        let model = controller.run(\"deserializeModel\", { controller, obj });\n        controller.change(model);\n      };\n      fr.readAsText(file);\n    });\n    input.click();\n  };\n  return (\n    <div\n      className={`bm-toolbar-item ${iconClassName(\"openfile\")}`}\n      onClick={onClickOpenFile}\n    />\n  );\n}\n","import React from \"react\";\nimport { DiagramLayoutType } from \"@blink-mind/core\";\nimport cx from \"classnames\";\nimport { Icon, iconClassName } from \"@blink-mind/renderer-react\";\nimport { Menu, MenuItem, Popover } from \"@blueprintjs/core\";\n\nexport function ToolbarItemLayout(props) {\n  const layoutDirs = [\n    [\n      DiagramLayoutType.LEFT_AND_RIGHT,\n      \"Left And Right\",\n      \"layout-left-and-right\"\n    ],\n    [DiagramLayoutType.LEFT_TO_RIGHT, \"Only Right\", \"layout-right\"],\n    [DiagramLayoutType.RIGHT_TO_LEFT, \"Only Left\", \"layout-left\"]\n  ];\n\n  const onClickSetLayout = layoutDir => e => {\n    const { diagram } = props;\n    const diagramProps = diagram.getDiagramProps();\n    const { controller } = diagramProps;\n    controller.run(\"setLayoutDir\", { ...diagramProps, layoutDir });\n  };\n\n  return (\n    <div\n      className={cx(\"bm-toolbar-item\", iconClassName(\"layout-left-and-right\"))}\n    >\n      <Popover enforceFocus={false}>\n        <div className=\"bm-toolbar-popover-target\" />\n        <Menu>\n          {layoutDirs.map(dir => (\n            <MenuItem\n              key={dir[1]}\n              icon={Icon(dir[2])}\n              text={dir[1]}\n              onClick={onClickSetLayout(dir[0])}\n            />\n          ))}\n        </Menu>\n      </Popover>\n    </div>\n  );\n};\n","import defaultThemeImg from '../../images/default.jpg';\nimport theme1Img from '../../images/theme1.jpg';\nimport theme2Img from '../../images/theme2.jpg';\nimport theme3Img from '../../images/theme3.jpg';\nimport theme4Img from '../../images/theme4.jpg';\nimport cx from 'classnames';\nimport { iconClassName } from '@blink-mind/renderer-react';\nimport { Popover } from '@blueprintjs/core';\nimport React from 'react';\n\nexport function ToolbarItemTheme(props) {\n  const onClickSetTheme = themeKey => e => {\n    const { diagram } = props;\n    const diagramProps = diagram.getDiagramProps();\n    const { controller } = diagramProps;\n    controller.run('setTheme', { ...diagramProps, themeKey });\n  };\n  const themes = [\n    ['default', defaultThemeImg],\n    ['theme1', theme1Img],\n    ['theme2', theme2Img],\n    ['theme3', theme3Img],\n    ['theme4', theme4Img]\n  ];\n\n  return (\n    <div className={cx('bm-toolbar-item', iconClassName('theme'))}>\n      <Popover enforceFocus={false}>\n        <div className=\"bm-toolbar-popover-target\" />\n        <div className=\"bm-popover-theme\">\n          {themes.map(theme => (\n            <div className=\"bm-theme-item\" onClick={onClickSetTheme(theme[0])}>\n              <img className=\"bm-theme-img\" src={theme[1]} alt={theme[0]} />\n            </div>\n          ))}\n        </div>\n      </Popover>\n    </div>\n  );\n}\n","import { Model } from \"@blink-mind/core\";\n\nexport function createKey() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\nexport const downloadFile = (url, filename) => {\n  const link = document.createElement(\"a\");\n  link.href = url;\n  link.download = filename;\n  link.click();\n};\n\nexport function generateSimpleModel() {\n\n  const rootKey = createKey();\n\n  return Model.create({\n    rootTopicKey: rootKey,\n    topics: [\n      {\n        key: rootKey,\n        blocks: [{ type: \"CONTENT\", data: \"MainTopic\" }],\n      }\n    ]\n  });\n}\n","import cx from \"classnames\";\nimport { iconClassName } from \"@blink-mind/renderer-react\";\nimport { Menu, MenuDivider, MenuItem, Popover } from \"@blueprintjs/core\";\nimport React from \"react\";\nimport { downloadFile } from \"../../utils\";\n\nexport function ToolbarItemExport(props) {\n  const onClickExportJson = e => {\n    const { diagram } = props;\n    const diagramProps = diagram.getDiagramProps();\n    const { controller, model } = diagramProps;\n\n    const json = controller.run(\"serializeModel\", diagramProps);\n    const jsonStr = JSON.stringify(json);\n    const url = `data:text/plain,${encodeURIComponent(jsonStr)}`;\n    const title = controller.run(\"getTopicTitle\", {\n      ...diagramProps,\n      topicKey: model.rootTopicKey\n    });\n    downloadFile(url, `${title}.blinkmind`);\n  };\n\n  return (\n    <div className={cx(\"bm-toolbar-item\", iconClassName(\"export\"))}>\n      <Popover enforceFocus={false}>\n        <div className=\"bm-toolbar-popover-target\" />\n        <Menu>\n          <MenuItem text=\"JSON(.json)\" onClick={onClickExportJson} />\n          <MenuDivider />\n        </Menu>\n      </Popover>\n    </div>\n  );\n}\n","import React from \"react\";\nimport cx from \"classnames\";\nimport \"./Toolbar.css\";\nimport { iconClassName, Icon } from \"@blink-mind/renderer-react\";\nimport { ToolbarItemOpen } from \"./toolbar-item-open\";\nimport { ToolbarItemLayout } from \"./toolbar-item-layout\";\nimport { ToolbarItemTheme } from \"./toolbar-item-theme\";\nimport { ToolbarItemExport } from \"./toolbar-item-export\";\n\n// import debug from \"debug\";\n// const log = debug(\"app\");\n\nexport class Toolbar extends React.PureComponent {\n  render() {\n    const props = this.props;\n\n    const { onClickUndo, onClickRedo, canUndo, canRedo } = props;\n\n    return (\n      <div className=\"bm-toolbar\">\n        <ToolbarItemOpen {...props} />\n        <ToolbarItemExport {...props} />\n        <ToolbarItemTheme {...props} />\n        <ToolbarItemLayout {...props} />\n\n        <div\n          className={cx(\"bm-toolbar-item\", iconClassName(\"undo\"), {\n            \"bm-toolbar-item-disabled\": !canUndo\n          })}\n          onClick={onClickUndo}\n        />\n\n        <div\n          className={cx(\"bm-toolbar-item\", iconClassName(\"redo\"), {\n            \"bm-toolbar-item-disabled\": !canRedo\n          })}\n          onClick={onClickRedo}\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Diagram } from \"@blink-mind/renderer-react\";\nimport RichTextEditorPlugin from \"@blink-mind/plugin-rich-text-editor\";\nimport { JsonSerializerPlugin } from \"@blink-mind/plugin-json-serializer\";\nimport { ThemeSelectorPlugin } from \"@blink-mind/plugin-theme-selector\";\nimport { Toolbar } from \"./toolbar/toolbar\";\nimport { generateSimpleModel } from \"../utils\";\nimport \"@blink-mind/renderer-react/lib/main.css\";\nimport debug from \"debug\";\nconst log = debug(\"app\");\n\nconst plugins = [\n  RichTextEditorPlugin(),\n  JsonSerializerPlugin(),\n  ThemeSelectorPlugin()\n];\n\nexport class Mindmap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initModel();\n  }\n\n  diagram;\n  diagramRef = ref => {\n    this.diagram = ref;\n    this.setState({});\n  };\n\n  initModel() {\n    const model = generateSimpleModel();\n    this.state = { model };\n  }\n\n  onClickUndo = e => {\n    const props = this.diagram.getDiagramProps();\n    const { controller } = props;\n    controller.run(\"undo\", props);\n  };\n\n  onClickRedo = e => {\n    const props = this.diagram.getDiagramProps();\n    const { controller } = props;\n    controller.run(\"redo\", props);\n  };\n\n  renderDiagram() {\n    return (\n      <Diagram\n        ref={this.diagramRef}\n        model={this.state.model}\n        onChange={this.onChange}\n        plugins={plugins}\n      />\n    );\n  }\n\n  renderToolbar() {\n    const props = this.diagram.getDiagramProps();\n    const { controller } = props;\n    const canUndo = controller.run(\"canUndo\", props);\n    const canRedo = controller.run(\"canRedo\", props);\n    const toolbarProps = {\n      diagram: this.diagram,\n      onClickUndo: this.onClickUndo,\n      onClickRedo: this.onClickRedo,\n      canUndo,\n      canRedo,\n    };\n    return <Toolbar {...toolbarProps} />;\n  }\n\n  onChange = model => {\n    this.setState({\n      model\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"mindmap\">\n        {this.diagram && this.renderToolbar()}\n        {this.renderDiagram()}\n      </div>\n    );\n  }\n}\n\nexport default Mindmap;\n","import React from \"react\";\nimport Mindmap from \"./component/mindmap\";\nimport \"./App.css\";\n\nfunction App() {\n  return <Mindmap />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nlet debugNameSpaces = [\n  \"app\"\n  // \"node:*\",\n];\n\nlocalStorage.debug = debugNameSpaces.join(\",\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}