{"version":3,"sources":["images/default.jpg","images/theme1.jpg","images/theme2.jpg","images/theme3.jpg","component/Toolbar.js","utils/index.js","component/MindMap.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Toolbar","debug","items","icon","label","clickHandler","showPopupOpenFile","showPopupExport","showPopupChangeTheme","handleUndo","handleRedo","this","props","onClickExportJson","onClickOpenFile","onClickChangeTheme","onClickUndo","onClickRedo","canUndo","canRedo","themes","defaultThemeImg","theme1Img","theme2Img","theme3Img","className","iconClassName","onClick","cx","enforceFocus","text","map","theme","src","React","Component","downloadFile","url","filename","link","document","createElement","href","download","click","log","plugins","RichTextEditorPlugin","JsonSerializerPlugin","ThemeSelectorPlugin","MindMap","diagramRef","ref","diagram","setState","e","input","controller","getDiagramProps","type","accept","addEventListener","evt","file","target","files","fr","FileReader","onload","txt","result","obj","JSON","parse","model","run","readAsText","json","jsonStr","stringify","encodeURIComponent","showDialog","themeKey","onChange","initModel","Model","create","rootTopicKey","topics","key","blocks","data","subKeys","parentKey","collapse","state","toolbarProps","renderToolbar","renderDiagram","App","Boolean","window","location","hostname","match","localStorage","join","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e48f1c0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default.4f8c4983.jpg\";","module.exports = __webpack_public_path__ + \"static/media/theme1.2f59f00b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/theme2.b18193fb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/theme3.61c97910.jpg\";","import React from \"react\";\nimport cx from \"classnames\";\nimport { Popover, Menu, MenuItem, MenuDivider } from \"@blueprintjs/core\";\nimport \"./Toolbar.css\";\nimport { iconClassName } from \"@blink-mind/renderer-react\";\nimport defaultThemeImg from \"../images/default.jpg\";\nimport theme1Img from \"../images/theme1.jpg\";\nimport theme2Img from \"../images/theme2.jpg\";\nimport theme3Img from \"../images/theme3.jpg\";\nimport debug from \"debug\";\nconst log = debug(\"app\");\n\nexport class Toolbar extends React.Component {\n  items = [\n    {\n      icon: \"openfile\",\n      label: \"open file\",\n      clickHandler: this.showPopupOpenFile\n    },\n    {\n      icon: \"export\",\n      label: \"export file\",\n      clickHandler: this.showPopupExport\n    },\n    {\n      icon: \"theme\",\n      label: \"change theme\",\n      clickHandler: this.showPopupChangeTheme\n    },\n    {\n      icon: \"undo\",\n      label: \"undo\",\n      clickHandler: this.handleUndo\n    },\n    {\n      icon: \"redo\",\n      label: \"redo\",\n      clickHandler: this.handleRedo\n    }\n  ];\n\n  render() {\n    const {\n      onClickExportJson,\n      onClickOpenFile,\n      onClickChangeTheme,\n      onClickUndo,\n      onClickRedo,\n      canUndo,\n      canRedo\n    } = this.props;\n    const themes = [\n      [\"default\", defaultThemeImg],\n      [\"theme1\", theme1Img],\n      [\"theme2\", theme2Img],\n      [\"theme3\", theme3Img]\n    ];\n    return (\n      <div className=\"bm-toolbar\">\n        <div\n          className={`bm-toolbar-item ${iconClassName(\"openfile\")}`}\n          onClick={onClickOpenFile}\n        />\n        <div className={cx(\"bm-toolbar-item\",iconClassName(\"export\"))}>\n          <Popover enforceFocus={false}>\n            <div className='bm-toolbar-popover-target'/>\n            <Menu>\n              <MenuItem text=\"JSON(.json)\" onClick={onClickExportJson} />\n              <MenuDivider />\n            </Menu>\n          </Popover>\n        </div>\n\n        <div className={cx(\"bm-toolbar-item\",iconClassName(\"theme\"))}>\n          <Popover enforceFocus={false}>\n            <div className='bm-toolbar-popover-target'/>\n            <div>\n              {themes.map(theme => (\n                <div\n                  className=\"bm-theme-item\"\n                  onClick={onClickChangeTheme(theme[0])}\n                >\n                  <img className=\"bm-theme-img\" src={theme[1]} />\n                </div>\n              ))}\n            </div>\n          </Popover>\n        </div>\n\n        <div\n          className={cx(\"bm-toolbar-item\", iconClassName(\"undo\"), {\n            \"bm-toolbar-item-disabled\": !canUndo\n          })}\n          onClick={onClickUndo}\n        />\n\n        <div\n          className={cx(\"bm-toolbar-item\", iconClassName(\"redo\"), {\n            \"bm-toolbar-item-disabled\": !canRedo\n          })}\n          onClick={onClickRedo}\n        />\n      </div>\n    );\n  }\n}\n","import { Model } from \"@blink-mind/core\";\n\nexport const downloadFile = (url, filename) => {\n  const link = document.createElement(\"a\");\n  link.href = url;\n  link.download = filename;\n  link.click();\n};\n\nexport function generateSimpleModel() {\n  return Model.create({\n    rootTopicKey: \"root\",\n    topics: [\n      {\n        key: \"root\",\n        blocks: [{ type: \"CONTENT\", data: \"MainTopic\" }],\n        subKeys: [\"sub1\", \"sub2\"]\n      },\n      {\n        key: \"sub1\",\n        parentKey: \"root\",\n        blocks: [{ type: \"CONTENT\", data: \"SubTopic1\" }],\n        subKeys: [\"sub1_1\", \"sub1_2\"],\n        collapse: false\n      },\n      {\n        key: \"sub1_1\",\n        parentKey: \"sub1\",\n        blocks: [{ type: \"CONTENT\", data: \"SubTopic\" }],\n        collapse: false\n      },\n      {\n        key: \"sub1_2\",\n        parentKey: \"sub1\",\n        blocks: [{ type: \"CONTENT\", data: \"SubTopic\" }],\n        collapse: false\n      },\n      {\n        key: \"sub2\",\n        subKeys: [\"sub2_1\", \"sub2_2\"],\n        parentKey: \"root\",\n        blocks: [{ type: \"CONTENT\", data: \"SubTopic2\" }]\n      },\n      {\n        key: \"sub2_1\",\n        parentKey: \"sub2\",\n        blocks: [{ type: \"CONTENT\", data: \"SubTopic2\" }],\n        collapse: false\n      },\n      {\n        key: \"sub2_2\",\n        parentKey: \"sub2\",\n        blocks: [{ type: \"CONTENT\", data: \"SubTopic\" }],\n        collapse: false\n      }\n    ]\n  });\n}\n","import React from \"react\";\nimport { Model } from \"@blink-mind/core\";\nimport { Diagram } from \"@blink-mind/renderer-react\";\nimport RichTextEditorPlugin from \"@blink-mind/plugin-rich-text-editor\";\nimport { JsonSerializerPlugin } from \"@blink-mind/plugin-json-serializer\";\nimport { ThemeSelectorPlugin } from \"@blink-mind/plugin-theme-selector\";\nimport { Toolbar } from \"./Toolbar\";\nimport { downloadFile, generateSimpleModel } from \"../utils\";\nimport \"@blink-mind/renderer-react/lib/main.css\";\nimport debug from \"debug\";\nconst log = debug(\"app\");\n\nconst plugins = [\n  RichTextEditorPlugin(),\n  JsonSerializerPlugin(),\n  ThemeSelectorPlugin()\n];\n\nexport class MindMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initModel();\n  }\n\n  diagram;\n  diagramRef = ref => {\n    this.diagram = ref;\n    this.setState({\n\n    })\n  };\n\n  initModel() {\n    const model = generateSimpleModel();\n    this.state = {\n      model\n    };\n  }\n\n  onClickOpenFile = e => {\n    const input = document.createElement(\"input\");\n    const props = this.diagram.getDiagramProps();\n    const { controller } = props;\n    input.type = \"file\";\n    input.accept = \".json\";\n    log(\"add onchange\");\n    input.addEventListener(\"change\", evt => {\n      const file = evt.target.files[0];\n      const fr = new FileReader();\n      log(\"add fr onload\");\n      fr.onload = evt => {\n        const txt = evt.target.result;\n        let obj = JSON.parse(txt);\n        log(\"OpenFile:\", obj);\n        let model = controller.run(\"deserializeModel\", { controller, obj });\n        log(\"OpenFile:\", model);\n        this.setState({ model });\n      };\n      fr.readAsText(file);\n    });\n    input.click();\n  };\n\n  onClickExportJson = e => {\n    const props = this.diagram.getDiagramProps();\n    const { controller } = props;\n\n    const json = controller.run(\"serializeModel\", props);\n    const jsonStr = JSON.stringify(json);\n    const url = `data:text/plain,${encodeURIComponent(jsonStr)}`;\n    downloadFile(url, \"example.json\");\n    this.setState({ showDialog: false });\n  };\n\n  onClickChangeTheme = themeKey => e => {\n    const props = this.diagram.getDiagramProps();\n    const { controller } = props;\n    controller.run(\"selectTheme\", { ...props, themeKey });\n  };\n\n  onClickUndo = e => {\n    const props = this.diagram.getDiagramProps();\n    const { controller } = props;\n    controller.run('undo',props);\n  };\n\n  onClickRedo = e => {\n    const props = this.diagram.getDiagramProps();\n    const { controller } = props;\n    controller.run('redo',props);\n  };\n\n  renderDiagram() {\n    return (\n      <Diagram\n        ref={this.diagramRef}\n        model={this.state.model}\n        onChange={this.onChange}\n        plugins={plugins}\n      />\n    );\n  }\n\n  renderToolbar() {\n    const props = this.diagram.getDiagramProps();\n    const { controller } = props;\n    const canUndo = controller.run('canUndo',props);\n    const canRedo = controller.run('canRedo',props);\n    const toolbarProps = {\n      onClickExportJson: this.onClickExportJson,\n      onClickOpenFile: this.onClickOpenFile,\n      onClickChangeTheme: this.onClickChangeTheme,\n      onClickUndo: this.onClickUndo,\n      onClickRedo: this.onClickRedo,\n      canUndo,\n      canRedo\n    };\n    return <Toolbar {...toolbarProps} />;\n  }\n\n  renderDialog() {}\n\n  onChange = model => {\n    this.setState({\n      model\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"mindmap\">\n        {this.diagram && this.renderToolbar()}\n        {this.renderDiagram()}\n      </div>\n    );\n  }\n}\n\nexport default MindMap;\n","import React from \"react\";\nimport MindMap from \"./component/MindMap\";\nimport \"./App.css\";\n\nfunction App() {\n  return <MindMap />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nlet debugNameSpaces = [\n  \"app\"\n  // \"node:*\",\n];\n\nlocalStorage.debug = debugNameSpaces.join(\",\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}