{"version":3,"sources":["component/ToolbarItem.js","utils/index.js","component/PopupContent.js","component/Toolbar.js","component/MindMap.js","App.js","serviceWorker.js","index.js"],"names":["ToolbarItem","props","onClick","console","log","config","diagramState","onChange","opType","op","clickHandler","this","className","cx","icon","React","Component","downloadFile","url","filename","link","document","createElement","href","download","click","PopupExportContent","model","mindMapModel","data","convertMindMapModelToRaw","json","JSON","stringify","encodeURIComponent","title","Popup","close","PopupOpenFileContent","input","type","accept","addEventListener","evt","file","target","files","fr","FileReader","onload","txt","result","obj","parse","convertRawToMindMapModel","newDiagramState","DiagramState","setMindMapModel","readAsText","Toolbar","showPopupExport","registerPlugin","create","content","plugins","popupExport","showPopupOpenFile","popupOpenFile","items","label","OpType","UNDO","REDO","ADD_SIBLING","ADD_CHILD","DELETE_NODE","toolbarItems","map","item","key","MindMap","setState","onKeyDown","e","focusItemMode","getFocusItemMode","FocusItemMode","Normal","PopupMenu","preventDefault","onKeyUp","which","Keys","TAB","RETURN","Editing","ctrlKey","nodeKey","arg","state","newState","mindModel","MindMapModel","createWith","rootItemKey","editorRootItemKey","subItemKeys","parentKey","collapse","hMargin","removeEventListener","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.08ed4cc9.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport cx from \"classnames\";\nimport { DiagramState, exportMindMapModelToJSON } from \"blink-mind-react\";\n\nexport class ToolbarItem extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  onClick = () => {\n    console.log(\"toolbar item click\");\n    let {config,diagramState,onChange} = this.props;\n    if (config.opType) {\n      this.props.op(config.opType, null);\n    } else if(config.clickHandler) {\n      config.clickHandler(diagramState,onChange);\n    }\n  };\n\n  render() {\n    const { config } = this.props;\n    return (\n      <span\n        className={cx(\"bm-toolbar-item\", \"iconfont\", `bm-${config.icon}`)}\n        onClick={this.onClick}\n      ></span>\n    );\n  }\n}\n","export const downloadFile = (url, filename) => {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  link.click();\n};\n","import React from \"react\";\nimport './PopupContent.css';\nimport {convertMindMapModelToRaw, convertRawToMindMapModel, DiagramState} from 'blink-mind-react';\nimport {downloadFile} from \"../utils\";\nimport Popup from 'react-popup';\n\nexport function PopupExportContent(props) {\n\n  const exportJSON = () => {\n    let model = props.diagramState.mindMapModel;\n    const data = convertMindMapModelToRaw(model);\n    let json = JSON.stringify(data);\n    let url = `data:text/plain,${encodeURIComponent(json)}`;\n    downloadFile(url,`${data.title}.json`);\n    Popup.close();\n  };\n\n  return (\n    <div className='popup-content'>\n      <ul className='popup-content-list'>\n        <li className='popup-content-list-item' onClick={exportJSON}>JSON (.json)</li>\n      </ul>\n    </div>\n  )\n}\n\n\nexport function PopupOpenFileContent(props) {\n  let {diagramState,onChange} = props;\n  const openFile = () => {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = '.json';\n    input.addEventListener('change',evt => {\n      const file = evt.target.files[0];\n      const fr = new FileReader();\n      fr.onload = evt => {\n        const txt = evt.target.result;\n        let obj = JSON.parse(txt);\n        console.log(obj);\n        let model = convertRawToMindMapModel(obj);\n        let newDiagramState = DiagramState.setMindMapModel(diagramState,model);\n        onChange(newDiagramState);\n      };\n      fr.readAsText(file);\n    });\n    input.click();\n    Popup.close();\n  };\n\n  return (\n    <div className='popup-content'>\n      <div>\n        Support for opening files in the following format\n      </div>\n      <ul className='popup-content-list'>\n        <li className='popup-content-list-item' >JSON (.json)</li>\n      </ul>\n\n      <div>\n        <button onClick={openFile}>Open File</button>\n        <button>Cancel</button>\n      </div>\n    </div>\n  )\n}\n","import React from \"react\";\nimport { ToolbarItem, ToolbarItemConfig } from \"./ToolbarItem\";\nimport \"./Toolbar.css\";\nimport { OpType, DiagramState } from \"blink-mind-react\";\n\nimport { PopupExportContent, PopupOpenFileContent } from \"./PopupContent\";\n\nimport Popup from \"react-popup\";\n\nexport class Toolbar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  showPopupExport = diagramState => {\n    console.log(\"showPopupExport\");\n    Popup.registerPlugin(\"popupExport\", function() {\n      this.create({\n        title: \"Please select export file format\",\n        content: <PopupExportContent diagramState={diagramState} />\n      });\n    });\n    Popup.plugins().popupExport();\n  };\n\n  showPopupOpenFile = (diagramState, onChange) => {\n    Popup.registerPlugin(\"popupOpenFile\", function() {\n      this.create({\n        title: \"Open File\",\n        content: (\n          <PopupOpenFileContent\n            diagramState={diagramState}\n            onChange={onChange}\n          />\n        )\n      });\n    });\n    Popup.plugins().popupOpenFile();\n  };\n\n  items = [\n    {\n      icon: \"newfile\",\n      label: \"new file\"\n      // opType: OpType.REDO\n    },\n    {\n      icon: \"openfile\",\n      label: \"open file\",\n      clickHandler: this.showPopupOpenFile\n    },\n    {\n      icon: \"export\",\n      label: \"export file\",\n      clickHandler: this.showPopupExport\n    },\n    {\n      icon: \"undo\",\n      label: \"undo\",\n      opType: OpType.UNDO\n    },\n    {\n      icon: \"redo\",\n      label: \"redo\",\n      opType: OpType.REDO\n    },\n    {\n      icon: \"add-sibling\",\n      label: \"add sibling\",\n      opType: OpType.ADD_SIBLING\n    },\n    {\n      icon: \"add-child\",\n      label: \"add child\",\n      opType: OpType.ADD_CHILD\n    },\n    {\n      icon: \"delete-node\",\n      label: \"delete node\",\n      opType: OpType.DELETE_NODE\n    }\n  ];\n\n  render() {\n    let { diagramState, onChange,op } = this.props;\n    let toolbarItems = this.items.map(item => (\n      <ToolbarItem\n        config={item}\n        key={item.label}\n        diagramState={diagramState}\n        onChange={onChange}\n        op={op}\n      />\n    ));\n    return (\n      <div>\n        <div className=\"bm-toolbar\">{toolbarItems}</div>\n        {/*{*/}\n        {/*this.state.popupType==='Export' ? <PopupExport/> : null*/}\n        {/*}*/}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Keys from \"fbjs/lib/Keys\";\nimport {\n  DiagramWidget,\n  MindMapModel,\n  DiagramConfig,\n  DiagramState,\n  OpType,\n  FocusItemMode\n} from \"blink-mind-react\";\n\nimport { Toolbar } from \"./Toolbar\";\n\nexport class MindMap extends React.Component {\n  constructor(props) {\n    super(props);\n    let mindModel = MindMapModel.createWith({\n      rootItemKey: \"root\",\n      editorRootItemKey: \"root\",\n      items: [\n        { key: \"root\", content: \"MainTopic\", subItemKeys: [\"sub1\", \"sub2\"] },\n        {\n          key: \"sub1\",\n          parentKey: \"root\",\n          content: \"SubTopic\",\n          subItemKeys: [],\n          collapse: true\n        },\n        {\n          key: \"sub2\",\n          parentKey: \"root\",\n          content: \"SubTopic\",\n          subItemKeys: []\n        }\n      ]\n    });\n    let diagramConfig = {\n      hMargin: 10\n    };\n    let diagramState = DiagramState.createWith(mindModel, diagramConfig);\n    this.state = {\n      diagramState: diagramState\n    };\n  }\n\n  getFocusItemMode() {\n    return this.state.diagramState.mindMapModel.getFocusItemMode();\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.onKeyDown);\n    document.addEventListener(\"keyup\", this.onKeyUp);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.onKeyDown);\n    document.removeEventListener(\"keyup\", this.onKeyUp);\n  }\n\n  onChange = diagramState => {\n    console.log(\"onChange\");\n    console.log(diagramState.mindMapModel);\n    this.setState({ diagramState });\n  };\n\n  onKeyDown = e => {\n    let focusItemMode = this.getFocusItemMode();\n    if (\n      focusItemMode === FocusItemMode.Normal ||\n      focusItemMode === FocusItemMode.PopupMenu\n    ) {\n      e.preventDefault();\n    }\n  };\n\n  onKeyUp = e => {\n    console.log(e);\n    let focusItemMode = this.getFocusItemMode();\n    switch (e.which) {\n      case Keys.TAB:\n        if (\n          focusItemMode === FocusItemMode.Normal ||\n          focusItemMode === FocusItemMode.PopupMenu\n        ) {\n          this.op(OpType.ADD_CHILD);\n        }\n        break;\n      case Keys.RETURN:\n        if (\n          focusItemMode === FocusItemMode.Normal ||\n          focusItemMode === FocusItemMode.PopupMenu\n        ) {\n          this.op(OpType.ADD_SIBLING);\n        }\n        if (focusItemMode === FocusItemMode.Editing) {\n          if (e.ctrlKey) {\n            this.op(OpType.ADD_SIBLING);\n          }\n        }\n        break;\n    }\n  };\n\n  op = (opType, nodeKey, arg) => {\n    let { diagramState } = this.state;\n    let newState = DiagramState.op(diagramState, opType, nodeKey, arg);\n    this.onChange(newState);\n  };\n\n  render() {\n    return (\n      <div className=\"mindmap\">\n        <Toolbar\n          diagramState={this.state.diagramState}\n          onChange={this.onChange}\n          op={this.op}\n        />\n        <DiagramWidget\n          diagramState={this.state.diagramState}\n          onChange={this.onChange}\n        />\n      </div>\n    );\n  }\n}\n\nexport default MindMap;\n","import React from \"react\";\nimport MindMap from \"./component/MindMap\";\nimport \"./App.css\";\nimport \"./popup.css\"\n\nfunction App() {\n  return (\n    <>\n      <MindMap />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Popup from \"react-popup\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\nReactDOM.render(<Popup />, document.getElementById(\"popup\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}